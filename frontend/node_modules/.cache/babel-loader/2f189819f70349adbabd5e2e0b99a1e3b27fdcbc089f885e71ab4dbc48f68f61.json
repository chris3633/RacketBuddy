{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{login as apiLogin,register as apiRegister,getCurrentUser}from'../services/api';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext(undefined);export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[token,setToken]=useState(localStorage.getItem('token'));useEffect(()=>{const fetchUser=async()=>{if(token){try{const userData=await getCurrentUser();setUser(userData);}catch(error){console.error('Failed to fetch user:',error);logout();}}};fetchUser();},[token]);const login=async(username,password)=>{const response=await apiLogin(username,password);setToken(response.access_token);localStorage.setItem('token',response.access_token);const userData=await getCurrentUser();setUser(userData);};const register=async data=>{await apiRegister(data);await login(data.email,data.password);};const logout=()=>{setUser(null);setToken(null);localStorage.removeItem('token');};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:{user,token,login,register,logout,isAuthenticated:!!token},children:children});};export const useAuth=()=>{const context=useContext(AuthContext);if(context===undefined){throw new Error('useAuth must be used within an AuthProvider');}return context;};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","login","apiLogin","register","apiRegister","getCurrentUser","jsx","_jsx","AuthContext","undefined","AuthProvider","_ref","children","user","setUser","token","setToken","localStorage","getItem","fetchUser","userData","error","console","logout","username","password","response","access_token","setItem","data","email","removeItem","Provider","value","isAuthenticated","useAuth","context","Error"],"sources":["C:/Users/Admin/Documents/RacketBuddy/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { User, RegisterData, LoginCredentials } from '../types';\r\nimport { login as apiLogin, register as apiRegister, getCurrentUser } from '../services/api';\r\n\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  token: string | null;\r\n  login: (username: string, password: string) => Promise<void>;\r\n  register: (data: RegisterData) => Promise<void>;\r\n  logout: () => void;\r\n  isAuthenticated: boolean;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [token, setToken] = useState<string | null>(localStorage.getItem('token'));\r\n\r\n  useEffect(() => {\r\n    const fetchUser = async () => {\r\n      if (token) {\r\n        try {\r\n          const userData = await getCurrentUser();\r\n          setUser(userData);\r\n        } catch (error) {\r\n          console.error('Failed to fetch user:', error);\r\n          logout();\r\n        }\r\n      }\r\n    };\r\n\r\n    fetchUser();\r\n  }, [token]);\r\n\r\n  const login = async (username: string, password: string) => {\r\n    const response = await apiLogin(username, password);\r\n    setToken(response.access_token);\r\n    localStorage.setItem('token', response.access_token);\r\n    const userData = await getCurrentUser();\r\n    setUser(userData);\r\n  };\r\n\r\n  const register = async (data: RegisterData) => {\r\n    await apiRegister(data);\r\n    await login(data.email, data.password);\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    setToken(null);\r\n    localStorage.removeItem('token');\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        user,\r\n        token,\r\n        login,\r\n        register,\r\n        logout,\r\n        isAuthenticated: !!token,\r\n      }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n}; "],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAE7E,OAASC,KAAK,GAAI,CAAAC,QAAQ,CAAEC,QAAQ,GAAI,CAAAC,WAAW,CAAEC,cAAc,KAAQ,iBAAiB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAW7F,KAAM,CAAAC,WAAW,cAAGX,aAAa,CAA8BY,SAAS,CAAC,CAEzE,MAAO,MAAM,CAAAC,YAAqD,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CAChF,KAAM,CAACE,IAAI,CAAEC,OAAO,CAAC,CAAGf,QAAQ,CAAc,IAAI,CAAC,CACnD,KAAM,CAACgB,KAAK,CAAEC,QAAQ,CAAC,CAAGjB,QAAQ,CAAgBkB,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAEhFlB,SAAS,CAAC,IAAM,CACd,KAAM,CAAAmB,SAAS,CAAG,KAAAA,CAAA,GAAY,CAC5B,GAAIJ,KAAK,CAAE,CACT,GAAI,CACF,KAAM,CAAAK,QAAQ,CAAG,KAAM,CAAAf,cAAc,CAAC,CAAC,CACvCS,OAAO,CAACM,QAAQ,CAAC,CACnB,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,CAAEA,KAAK,CAAC,CAC7CE,MAAM,CAAC,CAAC,CACV,CACF,CACF,CAAC,CAEDJ,SAAS,CAAC,CAAC,CACb,CAAC,CAAE,CAACJ,KAAK,CAAC,CAAC,CAEX,KAAM,CAAAd,KAAK,CAAG,KAAAA,CAAOuB,QAAgB,CAAEC,QAAgB,GAAK,CAC1D,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAxB,QAAQ,CAACsB,QAAQ,CAAEC,QAAQ,CAAC,CACnDT,QAAQ,CAACU,QAAQ,CAACC,YAAY,CAAC,CAC/BV,YAAY,CAACW,OAAO,CAAC,OAAO,CAAEF,QAAQ,CAACC,YAAY,CAAC,CACpD,KAAM,CAAAP,QAAQ,CAAG,KAAM,CAAAf,cAAc,CAAC,CAAC,CACvCS,OAAO,CAACM,QAAQ,CAAC,CACnB,CAAC,CAED,KAAM,CAAAjB,QAAQ,CAAG,KAAO,CAAA0B,IAAkB,EAAK,CAC7C,KAAM,CAAAzB,WAAW,CAACyB,IAAI,CAAC,CACvB,KAAM,CAAA5B,KAAK,CAAC4B,IAAI,CAACC,KAAK,CAAED,IAAI,CAACJ,QAAQ,CAAC,CACxC,CAAC,CAED,KAAM,CAAAF,MAAM,CAAGA,CAAA,GAAM,CACnBT,OAAO,CAAC,IAAI,CAAC,CACbE,QAAQ,CAAC,IAAI,CAAC,CACdC,YAAY,CAACc,UAAU,CAAC,OAAO,CAAC,CAClC,CAAC,CAED,mBACExB,IAAA,CAACC,WAAW,CAACwB,QAAQ,EACnBC,KAAK,CAAE,CACLpB,IAAI,CACJE,KAAK,CACLd,KAAK,CACLE,QAAQ,CACRoB,MAAM,CACNW,eAAe,CAAE,CAAC,CAACnB,KACrB,CAAE,CAAAH,QAAA,CAEDA,QAAQ,CACW,CAAC,CAE3B,CAAC,CAED,MAAO,MAAM,CAAAuB,OAAO,CAAGA,CAAA,GAAM,CAC3B,KAAM,CAAAC,OAAO,CAAGtC,UAAU,CAACU,WAAW,CAAC,CACvC,GAAI4B,OAAO,GAAK3B,SAAS,CAAE,CACzB,KAAM,IAAI,CAAA4B,KAAK,CAAC,6CAA6C,CAAC,CAChE,CACA,MAAO,CAAAD,OAAO,CAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}